{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"chapter02_mathematical-building-blocks-parte 2.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6NoGdGUQvM-k"},"source":["This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n","\n","**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n","\n","This notebook was generated for TensorFlow 2.6."]},{"cell_type":"code","metadata":{"id":"jG0VaFwovM-q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472317,"user_tz":180,"elapsed":4105,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"264ca639-c0a4-461c-ead8-15751d19c72d"},"source":["from tensorflow.keras.datasets import mnist\n","from tensorflow import keras\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"unTiCg4KvM-r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472318,"user_tz":180,"elapsed":21,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"6e82c417-b4a2-477d-85b8-c2af1842c007"},"source":["train_images.shape"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28)"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"aBE1ho1EvM-r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472318,"user_tz":180,"elapsed":18,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"69970340-a4d6-424a-bc04-88a9423d40f6"},"source":["len(train_labels)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["60000"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"SMlPbXfgvM-s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472319,"user_tz":180,"elapsed":17,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"9fe0d4d7-f207-4d39-af5a-7f93e434e6bd"},"source":["train_labels"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"U_uLyr7zvM-s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472320,"user_tz":180,"elapsed":15,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"74a44056-29d2-44b3-d23e-3db2c209a63f"},"source":["test_images.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 28, 28)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"2yRQKuVUvM-t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472321,"user_tz":180,"elapsed":15,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"4f37aa2c-b39c-472e-c062-1d46430c4d30"},"source":["len(test_labels)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10000"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"pMvhJmKQvM-u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215472322,"user_tz":180,"elapsed":13,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"43aadcd9-1ceb-4e08-b1c8-57c4a0a92966"},"source":["test_labels"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"Q2M-sQHVvM-6"},"source":["### Derivative of a tensor operation: the gradient"]},{"cell_type":"markdown","metadata":{"id":"08ScueJlvM-7"},"source":["#### The gradient tape in TensorFlow"]},{"cell_type":"code","metadata":{"id":"6_HH3H6XvM-7","executionInfo":{"status":"ok","timestamp":1652215472849,"user_tz":180,"elapsed":538,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["import tensorflow as tf\n","x = tf.Variable(0.)\n","with tf.GradientTape() as tape:\n","    y = 2 * x + 3\n","grad_of_y_wrt_x = tape.gradient(y, x)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"SsPfAH9DvM-7","executionInfo":{"status":"ok","timestamp":1652215472850,"user_tz":180,"elapsed":5,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["x = tf.Variable(tf.random.uniform((2, 2)))\n","with tf.GradientTape() as tape:\n","    y = 2 * x + 3\n","grad_of_y_wrt_x = tape.gradient(y, x)"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yh8mStf0vM-8"},"source":["## Looking back at our first example"]},{"cell_type":"code","metadata":{"id":"B7AJKjt6vM-8","executionInfo":{"status":"ok","timestamp":1652215473274,"user_tz":180,"elapsed":428,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","test_images = test_images.reshape((10000, 28 * 28))\n","test_images = test_images.astype(\"float32\") / 255"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MxngDDVNvM-8"},"source":["### Reimplementing our first example from scratch in TensorFlow"]},{"cell_type":"markdown","metadata":{"id":"HMo9aA9fvM-8"},"source":["#### A simple Dense class"]},{"cell_type":"code","metadata":{"id":"wwio8GT2vM--","executionInfo":{"status":"ok","timestamp":1652215473275,"user_tz":180,"elapsed":10,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["import tensorflow as tf\n","\n","class NaiveDense:\n","    def __init__(self, input_size, output_size, activation):\n","        self.activation = activation\n","\n","        w_shape = (input_size, output_size)\n","        w_initial_value = tf.random.uniform(w_shape, minval=0, maxval=1e-1)\n","        self.W = tf.Variable(w_initial_value)\n","\n","        b_shape = (output_size,)\n","        b_initial_value = tf.zeros(b_shape)\n","        self.b = tf.Variable(b_initial_value)\n","\n","    def __call__(self, inputs):\n","        return self.activation(tf.matmul(inputs, self.W) + self.b)\n","\n","    @property\n","    def weights(self):\n","        return [self.W, self.b]"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C3441f_cvM--"},"source":["#### A simple Sequential class"]},{"cell_type":"code","metadata":{"id":"QZ5OQNz-vM--","executionInfo":{"status":"ok","timestamp":1652215473276,"user_tz":180,"elapsed":10,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["class NaiveSequential:\n","    def __init__(self, layers):\n","        self.layers = layers\n","\n","    def __call__(self, inputs):\n","        x = inputs\n","        for layer in self.layers:\n","           x = layer(x)\n","        return x\n","\n","    @property\n","    def weights(self):\n","       weights = []\n","       for layer in self.layers:\n","           weights += layer.weights\n","       return weights"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"DhvzcTzSvM--","executionInfo":{"status":"ok","timestamp":1652215473277,"user_tz":180,"elapsed":11,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["model = NaiveSequential([\n","    NaiveDense(input_size=28 * 28, output_size=512, activation=tf.nn.relu),\n","    NaiveDense(input_size=512, output_size=10, activation=tf.nn.softmax)\n","])\n","assert len(model.weights) == 4"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6-6L3cPnvM--"},"source":["#### A batch generator"]},{"cell_type":"code","metadata":{"id":"Ux7eroSBvM-_","executionInfo":{"status":"ok","timestamp":1652215473277,"user_tz":180,"elapsed":10,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["import math\n","\n","class BatchGenerator:\n","    def __init__(self, images, labels, batch_size=128):\n","        assert len(images) == len(labels)\n","        self.index = 0\n","        self.images = images\n","        self.labels = labels\n","        self.batch_size = batch_size\n","        self.num_batches = math.ceil(len(images) / batch_size)\n","\n","    def next(self):\n","        images = self.images[self.index : self.index + self.batch_size]\n","        labels = self.labels[self.index : self.index + self.batch_size]\n","        self.index += self.batch_size\n","        return images, labels"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kAIq-3nHvM-_"},"source":["### Running one training step"]},{"cell_type":"code","metadata":{"id":"BkCgOoLnvM-_","executionInfo":{"status":"ok","timestamp":1652215473277,"user_tz":180,"elapsed":10,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["def one_training_step(model, images_batch, labels_batch):\n","    with tf.GradientTape() as tape:\n","        predictions = model(images_batch)\n","        per_sample_losses = tf.keras.losses.sparse_categorical_crossentropy(\n","            labels_batch, predictions)\n","        average_loss = tf.reduce_mean(per_sample_losses)\n","    gradients = tape.gradient(average_loss, model.weights)\n","    update_weights(gradients, model.weights)\n","    return average_loss"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"-GblqctBvM-_","executionInfo":{"status":"ok","timestamp":1652215473278,"user_tz":180,"elapsed":10,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["learning_rate = 1e-3\n","\n","def update_weights(gradients, weights):\n","    for g, w in zip(gradients, weights):\n","        w.assign_sub(g * learning_rate)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"unMwsDOkvM-_","executionInfo":{"status":"ok","timestamp":1652215473282,"user_tz":180,"elapsed":13,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["from tensorflow.keras import optimizers\n","\n","optimizer = optimizers.SGD(learning_rate=1e-3)\n","\n","def update_weights(gradients, weights):\n","    optimizer.apply_gradients(zip(gradients, weights))"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZMNPueNavM_A"},"source":["### The full training loop"]},{"cell_type":"code","metadata":{"id":"ynkbbG8VvM_A","executionInfo":{"status":"ok","timestamp":1652215473282,"user_tz":180,"elapsed":13,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}}},"source":["def fit(model, images, labels, epochs, batch_size=128):\n","    for epoch_counter in range(epochs):\n","        print(f\"Epoch {epoch_counter}\")\n","        batch_generator = BatchGenerator(images, labels)\n","        for batch_counter in range(batch_generator.num_batches):\n","            images_batch, labels_batch = batch_generator.next()\n","            loss = one_training_step(model, images_batch, labels_batch)\n","            if batch_counter % 100 == 0:\n","                print(f\"loss at batch {batch_counter}: {loss:.2f}\")"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"BNSjjQsnvM_A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215521350,"user_tz":180,"elapsed":48080,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"73cc5645-05bc-480b-a9bd-66afd9afc4a5"},"source":["from tensorflow.keras.datasets import mnist\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","test_images = test_images.reshape((10000, 28 * 28))\n","test_images = test_images.astype(\"float32\") / 255\n","\n","fit(model, train_images, train_labels, epochs=10, batch_size=128)"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0\n","loss at batch 0: 3.70\n","loss at batch 100: 2.24\n","loss at batch 200: 2.16\n","loss at batch 300: 2.04\n","loss at batch 400: 2.18\n","Epoch 1\n","loss at batch 0: 1.87\n","loss at batch 100: 1.88\n","loss at batch 200: 1.78\n","loss at batch 300: 1.66\n","loss at batch 400: 1.78\n","Epoch 2\n","loss at batch 0: 1.55\n","loss at batch 100: 1.57\n","loss at batch 200: 1.46\n","loss at batch 300: 1.38\n","loss at batch 400: 1.46\n","Epoch 3\n","loss at batch 0: 1.30\n","loss at batch 100: 1.33\n","loss at batch 200: 1.20\n","loss at batch 300: 1.17\n","loss at batch 400: 1.23\n","Epoch 4\n","loss at batch 0: 1.11\n","loss at batch 100: 1.15\n","loss at batch 200: 1.01\n","loss at batch 300: 1.02\n","loss at batch 400: 1.08\n","Epoch 5\n","loss at batch 0: 0.97\n","loss at batch 100: 1.02\n","loss at batch 200: 0.88\n","loss at batch 300: 0.90\n","loss at batch 400: 0.96\n","Epoch 6\n","loss at batch 0: 0.86\n","loss at batch 100: 0.91\n","loss at batch 200: 0.78\n","loss at batch 300: 0.82\n","loss at batch 400: 0.88\n","Epoch 7\n","loss at batch 0: 0.79\n","loss at batch 100: 0.83\n","loss at batch 200: 0.70\n","loss at batch 300: 0.75\n","loss at batch 400: 0.81\n","Epoch 8\n","loss at batch 0: 0.72\n","loss at batch 100: 0.76\n","loss at batch 200: 0.64\n","loss at batch 300: 0.70\n","loss at batch 400: 0.76\n","Epoch 9\n","loss at batch 0: 0.67\n","loss at batch 100: 0.71\n","loss at batch 200: 0.59\n","loss at batch 300: 0.65\n","loss at batch 400: 0.72\n"]}]},{"cell_type":"markdown","metadata":{"id":"bsN_lX5xvM_A"},"source":["### Evaluating the model"]},{"cell_type":"code","metadata":{"id":"LOOJILSvvM_A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652215521351,"user_tz":180,"elapsed":28,"user":{"displayName":"Livia Cruz","userId":"04538902551424059914"}},"outputId":"9b56141b-d2e9-4a83-96e8-85118d81e9b6"},"source":["import numpy as np\n","predictions = model(test_images)\n","predictions = predictions.numpy()\n","predicted_labels = np.argmax(predictions, axis=1)\n","matches = predicted_labels == test_labels\n","print(f\"accuracy: {matches.mean():.2f}\")"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy: 0.82\n"]}]},{"cell_type":"markdown","metadata":{"id":"_QoxNidmvM_B"},"source":["## Summary"]}]}